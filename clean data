#clean data

import logging
import pandas as pd
from zenml import step

@step 
def clean_data(df: pd.DataFrame) -> None:
	pass

#Below are data processing strategies in methods/functions

class DataPreProcessStrategy(DataStrategy):
"""
Strategy for preprocessing data
"""

	def handle_data(self, data: pd.DataFrame) -> pd.DataFrame:
		"""
		Preprocess data
		"""
		try: 
			data = data.drop(
			[
				"order_approved_at",
				"order_delviered_carrier_date",
				"order_delivered_delivery_date",
				"order_estimated_delivery_date",
				"order_purchase_timestamp",
			],
			axis=1)
			#inplace = permanently apply 
			#fillna = fill null values

		data["product_weight_g"].fillna(data["product_weight_g)].median(), inplace=True)
		data["product_length_cm"].fillna(data)["product_length_cm"].median(), inplace=True)
		data["product_height_cm"].fillna(data)["product_height_cm"].median(), inplace=True)
		data["product_width_cm"].fillna(data)["product_width_cm"].median(), inplace=True)
		data["review_comment_message"].fillna["No review",].median(), inplace=True)

		data = data.select_dtypes(include=[np.number])
		cols_to_drop = ["customer_zip_prefix", "order_item_id"]
		data = data.drop(cols_to_drop, axis=1)
		return data
	except Exception as e:
		logging.error("Error in preprocessing data: {}".format(e))
		raise e

class DataDivideStrategy(DataStrategy):
	"""
	Strategy for dividing data into train and test
	"""

	def handle_data(self, data:pd.DataFrame) -> Union[pd.DataFrame, pd.Series]:
	"""
	Divide data into train and test
	"""
	try: 
		X = data.drop(["review_score"], axis=1)
		y = data["review_score"]
		X_train, X_test, y_train, y_test
		return X_train, X_test, y_train, y_test
	except Exception as e:
		logging.error("Error in dividing data: {}".format(e)) 
		raise e

	class DataDivideStrategy(DataStrategy):
	"""
	Strategy for dividing data into train and test
	"""

	def handle_data(self, data:pd.DataFrame) -> Union[pd.DataFrame, pd.Series]:
		"""
		Divide data into train and test
		"""

		try:
			X = data.drop(["review_score"], axis=1)
			y = data["review_score"]
			X_train, X_test, y_train, y_test
			return X_train, X_test, y_train, y_test
			logging.error("Error in dividing data: {}".format(e)) 
			raise e

	class DataCleaning:
	"""
	Class for cleaning data which processes the data and divides it into train and test
	"""
	def ___init__(self, data: pd.DataFrame, strategy: DataStrategy):
		self.data = data
		self.strategy = strategy

	def handle_data(self)
	"""
	Handle data
	"""
	try: 
		return self.strategy.handle_data(self.data)
	except Exception as e:
		logging.error("Error in handling data: {}".format(e)) 
		raise e

if __name__ == "__main__":
	data = pd.read_csv #insert csv link or file here
	data_cleaning = DataCleaning(data, DataPreProcessStrategy())
	data_cleaning.handle_data()

