#stock bond trading prediction app

#Input

pandas_ta_bbands(close=df.xs ('AAPL', level=1)['adj close']), length=20

#bbl is lower; bblm is middle, bbu is upper Bollinger band

df['bb_low'] = df.groupby(levle=1)['adj close'].transform(lambda x: pandas_ta.bbands(close=np.log1p(x), length=20).iloc[:,0])
df['bb_mid'] = df.groupby(levle=1)['adj close'].transform(lambda x: pandas_ta.bbands(close=np.log1p(x), length=20).iloc[:,0])
df['bb_high'] = df.groupby(levle=1)['adj close'].transform(lambda x: pandas_ta.bbands(close=np.log1p(x), length=20).iloc[:,0])

#calculating APY of stock/bond

pandas_ta.atr(high=df['high'],
			  low=df['low'],
			  close=df['close'],
			  length=14

#function to compute APR

def compute-atr(stock_data):
	atr = pandas_ta.atr(high=df['high'],
			  low=df['low'],
			  close=df['close'],
			  length=14
	return atr.sub(atr.mean()).div(atr.std())

df['atr'] = df.groupby(level=1, group_keys=False).apply(compute_atr)

#function to compute MACD

def compute_macd(close):
	macd = pandas_ta.macd(close=close, length=20).iloc[:,0]
	return macd.sub(macd.mean()).div(macd.std())

df['macd'] = df.groupby(levle=1, group_keys=False)['adj close'].apply(compute.macd)

df ['collar_volume'] = (df['adj close']*df['volume'])1e6


#calculate montly returns for different time horizons as features

# g = df.sx('AAPL', Level=1)

def calculate_returns(df):

	outlier_cutoff = 0.005

	lags = [1, 2, 3 ,6, 9, 12]

	for lag in lags:

		df[f'return_{lag}m'] = (df['adj close']
								.pct_change(lag))
								.pipe(lambda x: x.clip(lower=x.quantile(outlier_cutoff)
												   upper=x.quantile(1-outlier_cutoff))))
								.add(1)
								.pow(1/lag)
								.sub(1)
	return df

data = data.groupby(level=1, group_keys=False).apply(calculate_returns).dropna()
data


#Download fama-french factors and calculate rolling factor betas for each stock in the data set
# fama/french 5 research factors (2x3)

#input

#factor_data = web.DataReader('F-F_Research_Data_5_Fctors_2x3'
#				'famafrench',
#				start='2010')[0].drop('RF', axis=1)

factor_data.index = pd.to_datetime(factor_data.index)
# factor_data = factor_data.resample('M').last().div(100)

#factor_data.index.name = 'date'

#factor_data

#factor_data = factor_data.join(data['retun_1m']).sort_index()

#factor_data.xs('AAPL', level=1).head()

#Removing stocks that have less than a certain amount of time so as to not break the algorithm.

factor_data.groupby(level=1).size()
